// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shop/service.proto

package shop

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("shop/service.proto", fileDescriptor_7c44f5b19cdcfcf5) }

var fileDescriptor_7c44f5b19cdcfcf5 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x11, 0x54, 0x95, 0xf0, 0xe8, 0x02, 0x12, 0x1d, 0xd9, 0x1b, 0x23, 0x18, 0x50, 0x17,
	0x06, 0x7e, 0x94, 0x19, 0xba, 0xb1, 0x39, 0xd1, 0x51, 0x1c, 0x29, 0x89, 0x2d, 0xdf, 0x9b, 0xa0,
	0x3c, 0x12, 0x6f, 0x89, 0x9c, 0x2b, 0xda, 0x86, 0x8e, 0xfe, 0xce, 0xf9, 0x7c, 0xa4, 0xab, 0x34,
	0x39, 0x1f, 0x0c, 0x21, 0x0e, 0x75, 0x89, 0x2c, 0x44, 0xcf, 0x5e, 0x2f, 0x12, 0x5b, 0xaf, 0xa6,
	0xa4, 0x05, 0x91, 0xad, 0x40, 0x12, 0x3d, 0xfc, 0x9c, 0xab, 0xc5, 0xce, 0xf9, 0xa0, 0xb7, 0x6a,
	0xf9, 0x1a, 0x61, 0x19, 0xfa, 0x3a, 0x4b, 0xc5, 0x2c, 0x51, 0x21, 0x1f, 0x3d, 0xe2, 0xb8, 0xbe,
	0xf9, 0x8f, 0x3f, 0x41, 0x7d, 0xc3, 0x77, 0x67, 0x49, 0x7d, 0x43, 0x83, 0xb9, 0x2a, 0xe4, 0x44,
	0x15, 0xbc, 0x57, 0xef, 0xd5, 0x45, 0x0e, 0xd6, 0xfa, 0x50, 0xc8, 0xc1, 0x22, 0xad, 0x66, 0xec,
	0x78, 0x6c, 0x07, 0x1b, 0x4b, 0x77, 0x3c, 0x26, 0xe4, 0x64, 0x4c, 0xf0, 0x5e, 0x7d, 0x56, 0x97,
	0x39, 0x38, 0x47, 0x17, 0x41, 0xfa, 0xea, 0x50, 0x7b, 0x6f, 0x03, 0x8f, 0x22, 0xdf, 0xce, 0x46,
	0xa5, 0xfa, 0xe7, 0xbf, 0x6c, 0xbf, 0x9e, 0xaa, 0x9a, 0x5d, 0x5f, 0x64, 0xa5, 0x6f, 0x4d, 0x88,
	0x1e, 0x4d, 0xc1, 0x9d, 0xa1, 0xd2, 0x79, 0xdf, 0x6c, 0x30, 0x60, 0xd3, 0xd9, 0xa1, 0x36, 0x95,
	0x65, 0x7c, 0xdb, 0xd1, 0x4c, 0x07, 0x26, 0x93, 0x3e, 0x2c, 0x96, 0xd3, 0xe3, 0xf1, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x80, 0x09, 0x1c, 0x24, 0x9e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShopClient is the client API for Shop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShopClient interface {
	Create(ctx context.Context, in *ShopCreateQuery, opts ...grpc.CallOption) (*ShopCreateResult, error)
	Delete(ctx context.Context, in *ShopDeleteQuery, opts ...grpc.CallOption) (*ShopDeleteResult, error)
	Get(ctx context.Context, in *ShopGetQuery, opts ...grpc.CallOption) (*ShopGetResult, error)
	Search(ctx context.Context, in *ShopSearchQuery, opts ...grpc.CallOption) (*ShopSearchResult, error)
	GetGenres(ctx context.Context, in *ShopEmptyQuery, opts ...grpc.CallOption) (*ShopGetGenresResult, error)
}

type shopClient struct {
	cc *grpc.ClientConn
}

func NewShopClient(cc *grpc.ClientConn) ShopClient {
	return &shopClient{cc}
}

func (c *shopClient) Create(ctx context.Context, in *ShopCreateQuery, opts ...grpc.CallOption) (*ShopCreateResult, error) {
	out := new(ShopCreateResult)
	err := c.cc.Invoke(ctx, "/shop.Shop/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) Delete(ctx context.Context, in *ShopDeleteQuery, opts ...grpc.CallOption) (*ShopDeleteResult, error) {
	out := new(ShopDeleteResult)
	err := c.cc.Invoke(ctx, "/shop.Shop/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) Get(ctx context.Context, in *ShopGetQuery, opts ...grpc.CallOption) (*ShopGetResult, error) {
	out := new(ShopGetResult)
	err := c.cc.Invoke(ctx, "/shop.Shop/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) Search(ctx context.Context, in *ShopSearchQuery, opts ...grpc.CallOption) (*ShopSearchResult, error) {
	out := new(ShopSearchResult)
	err := c.cc.Invoke(ctx, "/shop.Shop/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetGenres(ctx context.Context, in *ShopEmptyQuery, opts ...grpc.CallOption) (*ShopGetGenresResult, error) {
	out := new(ShopGetGenresResult)
	err := c.cc.Invoke(ctx, "/shop.Shop/GetGenres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServer is the server API for Shop service.
type ShopServer interface {
	Create(context.Context, *ShopCreateQuery) (*ShopCreateResult, error)
	Delete(context.Context, *ShopDeleteQuery) (*ShopDeleteResult, error)
	Get(context.Context, *ShopGetQuery) (*ShopGetResult, error)
	Search(context.Context, *ShopSearchQuery) (*ShopSearchResult, error)
	GetGenres(context.Context, *ShopEmptyQuery) (*ShopGetGenresResult, error)
}

func RegisterShopServer(s *grpc.Server, srv ShopServer) {
	s.RegisterService(&_Shop_serviceDesc, srv)
}

func _Shop_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopCreateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Create(ctx, req.(*ShopCreateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopDeleteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Delete(ctx, req.(*ShopDeleteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopGetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Get(ctx, req.(*ShopGetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Search(ctx, req.(*ShopSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopEmptyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.Shop/GetGenres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetGenres(ctx, req.(*ShopEmptyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shop.Shop",
	HandlerType: (*ShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Shop_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Shop_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Shop_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Shop_Search_Handler,
		},
		{
			MethodName: "GetGenres",
			Handler:    _Shop_GetGenres_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop/service.proto",
}
