// Code generated by protoc-gen-go. DO NOT EDIT.
// source: food/service.proto

package food

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("food/service.proto", fileDescriptor_c2d36a040c8dcb1f) }

var fileDescriptor_c2d36a040c8dcb1f = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xcf, 0x31, 0x8b, 0x83, 0x30,
	0x14, 0x07, 0x70, 0x0f, 0xc4, 0x21, 0x63, 0x8e, 0x3b, 0x38, 0x47, 0x77, 0x13, 0xb8, 0x1b, 0xee,
	0x5c, 0xbd, 0xb6, 0xd0, 0xb1, 0xed, 0xd6, 0x2d, 0xc6, 0x57, 0x15, 0xa2, 0x4f, 0x92, 0x68, 0xf1,
	0xeb, 0xf5, 0x93, 0x95, 0x18, 0x8a, 0xb4, 0x38, 0xe6, 0xf7, 0x7f, 0xef, 0x4f, 0x1e, 0xa1, 0x17,
	0xc4, 0x92, 0x1b, 0xd0, 0x63, 0x23, 0x81, 0xf5, 0x1a, 0x2d, 0xd2, 0xd0, 0x59, 0xfc, 0x3e, 0x27,
	0x2d, 0x18, 0x23, 0x2a, 0x30, 0x3e, 0xfa, 0xbe, 0xbd, 0x91, 0x70, 0x87, 0x58, 0xd2, 0x8c, 0x44,
	0xff, 0x1a, 0x84, 0x05, 0xfa, 0xc1, 0xdc, 0x20, 0x73, 0xea, 0xe5, 0x30, 0x80, 0x9e, 0xe2, 0xcf,
	0x57, 0x3e, 0x82, 0x19, 0x94, 0x4d, 0x02, 0xfa, 0x47, 0xa2, 0x0d, 0x28, 0x78, 0x5e, 0xf5, 0xe2,
	0x57, 0xd7, 0x39, 0x09, 0xe8, 0x96, 0x90, 0x13, 0x08, 0x2d, 0xeb, 0x7c, 0xda, 0x97, 0xf4, 0x6b,
	0x19, 0x5b, 0xd4, 0x37, 0xc4, 0x6b, 0xd1, 0xe3, 0x03, 0x79, 0x76, 0xfe, 0xad, 0x1a, 0x5b, 0x0f,
	0x05, 0x93, 0xd8, 0xf2, 0x5e, 0x23, 0xa8, 0xc2, 0x76, 0xdc, 0xc8, 0x1a, 0x51, 0xa5, 0x30, 0x42,
	0xda, 0x89, 0xb1, 0xe1, 0x95, 0xb0, 0x70, 0x15, 0x13, 0x9f, 0x2f, 0x37, 0xdc, 0x35, 0x16, 0xd1,
	0xfc, 0xf8, 0xb9, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xac, 0xf9, 0xbb, 0x37, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FoodClient is the client API for Food service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FoodClient interface {
	Create(ctx context.Context, in *FoodCreateQuery, opts ...grpc.CallOption) (*FoodCreateResult, error)
	Delete(ctx context.Context, in *FoodDeleteQuery, opts ...grpc.CallOption) (*FoodDeleteQuery, error)
	SearchById(ctx context.Context, in *FoodSearchByIdQuery, opts ...grpc.CallOption) (*FoodSearchByIdResult, error)
}

type foodClient struct {
	cc *grpc.ClientConn
}

func NewFoodClient(cc *grpc.ClientConn) FoodClient {
	return &foodClient{cc}
}

func (c *foodClient) Create(ctx context.Context, in *FoodCreateQuery, opts ...grpc.CallOption) (*FoodCreateResult, error) {
	out := new(FoodCreateResult)
	err := c.cc.Invoke(ctx, "/food.Food/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodClient) Delete(ctx context.Context, in *FoodDeleteQuery, opts ...grpc.CallOption) (*FoodDeleteQuery, error) {
	out := new(FoodDeleteQuery)
	err := c.cc.Invoke(ctx, "/food.Food/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodClient) SearchById(ctx context.Context, in *FoodSearchByIdQuery, opts ...grpc.CallOption) (*FoodSearchByIdResult, error) {
	out := new(FoodSearchByIdResult)
	err := c.cc.Invoke(ctx, "/food.Food/SearchById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodServer is the server API for Food service.
type FoodServer interface {
	Create(context.Context, *FoodCreateQuery) (*FoodCreateResult, error)
	Delete(context.Context, *FoodDeleteQuery) (*FoodDeleteQuery, error)
	SearchById(context.Context, *FoodSearchByIdQuery) (*FoodSearchByIdResult, error)
}

func RegisterFoodServer(s *grpc.Server, srv FoodServer) {
	s.RegisterService(&_Food_serviceDesc, srv)
}

func _Food_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodCreateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/food.Food/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServer).Create(ctx, req.(*FoodCreateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Food_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodDeleteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/food.Food/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServer).Delete(ctx, req.(*FoodDeleteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Food_SearchById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FoodSearchByIdQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServer).SearchById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/food.Food/SearchById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServer).SearchById(ctx, req.(*FoodSearchByIdQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Food_serviceDesc = grpc.ServiceDesc{
	ServiceName: "food.Food",
	HandlerType: (*FoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Food_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Food_Delete_Handler,
		},
		{
			MethodName: "SearchById",
			Handler:    _Food_SearchById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "food/service.proto",
}
